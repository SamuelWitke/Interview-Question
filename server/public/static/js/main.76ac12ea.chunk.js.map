{"version":3,"sources":["logo.svg","reducers/index.js","reducers/ants.js","reducers/ui.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","rootReducer","combineReducers","ants","state","arguments","length","undefined","_ref","type","payload","newState","reduce","map","ant","name","Object","assign","id","Error","defineProperty","likelihoodOfAntWinning","apollo","apolloReducer","ui","buttonDisabled","data","gql","_templateObject","App","startTest","_this$props","_this","props","queryData","uiInProgress","inProgress","uiCompleted","completed","requests","element","Promise","resolve","delay","Math","random","callback","setTimeout","generateAntWinLikelihoodCalculator","then","all","_this$props2","this","initalize","_this$props3","values","sort","a","b","react_default","createElement","key","disabled","onClick","React","Component","ReduxWapper","connect","_ref2","dispatch","QueryWrapper","className","src","logo","alt","react_apollo_browser_umd","query","_ref3","loading","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","compose","applyMiddleware","logger","__REDUX_DEVTOOLS_EXTENSION__","f","cache","ReduxCache","httpLink","HttpLink","uri","client","ApolloClient","link","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.76ac12ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { combineReducers } from 'redux';\nimport * as ants from './ants';\nimport * as ui from './ui';\nimport { apolloReducer } from 'apollo-cache-redux';\n\n\nexport const rootReducer =\n    combineReducers({\n        ants: ants.reducer,\n        apollo: apolloReducer,\n        ui: ui.reducer\n});                       ","export const INIT = \"@@ANTS INIT\";\nexport const NOT_RUN_YET = \"@@ANTS NOT_RUN_YET\";\nexport const CALCULATED = \"@@ANTS CALCULATED\";\nexport const IN_PROGRESS = \"@@ANTS IN_PROGRESS\";\n\n\nexport const reducer = (state = {}, {type, payload}) => {\n    switch (type) {\n      case INIT: {\n          const newState = payload.reduce( (map,ant) => {\n              ant.state = NOT_RUN_YET;\n              map[ant.name] = ant;\n             return map; \n          },{})\n          return Object.assign({},state,newState);\n      }\n      case IN_PROGRESS: {\n          const { id } = payload;\n          if(!(id in state)) {\n              throw Error(\"ID NOT FOUND\")\n          }\n          return Object.assign({},state,{\n              [id] : Object.assign({},state[id], {state: IN_PROGRESS})\n          });\n      }\n      case CALCULATED:{\n          const { id, likelihoodOfAntWinning} = payload;\n            if(!(id in state)) {\n              throw Error(\"ID NOT FOUND\")\n          }\n          return Object.assign({},state,{\n              [id] : Object.assign({},state[id], {state: CALCULATED, likelihoodOfAntWinning})\n          });\n      }\n      default:\n        return state;\n    }\n  }","export const UI_NOT_RUN_YET = \"@@UI NOT_RUN_YET\";\nexport const UI_CALCULATED = \"@@UI CALCULATED\";\nexport const UI_IN_PROGRESS = \"@@UI IN_PROGRESS\";\n\nexport const reducer = (state = {state: UI_NOT_RUN_YET, buttonDisabled: false}, { type }) => {\n    switch (type) {\n        case UI_IN_PROGRESS:\n            return {state: UI_IN_PROGRESS, buttonDisabled: true} \n        case UI_CALCULATED: \n            return {state: UI_CALCULATED, buttonDisabled: false} \n        default:\n            return state;\n    }      \n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { connect } from 'react-redux';\nimport { INIT, IN_PROGRESS, CALCULATED } from './reducers/ants';\nimport { UI_IN_PROGRESS, UI_CALCULATED } from './reducers/ui';\n\nconst data = gql`\nquery GetAnts{\n  ants {\n    weight,\n    name,\n    color,\n    length,\n  }\n}\n`;\n\nfunction generateAntWinLikelihoodCalculator(id) {\n  var delay = 7000 + Math.random() * 7000;\n  var likelihoodOfAntWinning = Math.random();\n  return function (callback) {\n    setTimeout(function () {\n      callback(id, likelihoodOfAntWinning);\n    }, delay);\n  }\n}\n\nclass App extends React.Component {\n\n  componentWillMount() {\n    const { queryData, initalize, } = this.props;\n    initalize(queryData.ants);\n\n  }\n\n  startTest = () => {\n    const { queryData, uiInProgress, inProgress, uiCompleted, completed } = this.props;\n    uiInProgress();\n    const requests = queryData.ants.map((element) => {\n      return new Promise((resolve) => {\n        inProgress(element.name);\n        generateAntWinLikelihoodCalculator(element.name)(\n          (id, likelihoodOfAntWinning) => {\n            resolve({ id, likelihoodOfAntWinning });\n          })\n      }).then(({ id, likelihoodOfAntWinning }) => completed(id, likelihoodOfAntWinning))\n    });\n    Promise.all(requests).then(() => uiCompleted())\n  }\n\n  render() {\n    const { ants, ui } = this.props;\n    const values = Object.values(ants);\n    values.sort((a, b) => a.likelihoodOfAntWinning - b.likelihoodOfAntWinning);\n    return (\n      <div>\n        {ui.state}\n        <ul>\n          {values.map((ant, id) => (\n            <li key={id}>\n              <p> {ant.name} {ant.state} {ant.likelihoodOfAntWinning} </p>\n            </li>\n          ))}\n        </ul>\n        <button disabled={ui.buttonDisabled} onClick={this.startTest}>startTest</button>\n      </div>\n    )\n  }\n}\n\n// Redux Component Wrapper\nconst ReduxWapper = connect(\n  ({ ants, ui }) => ({\n    ants,\n    ui,\n  }),\n  (dispatch) => ({\n    uiInProgress: () => dispatch({ type: UI_IN_PROGRESS }),\n    uiCompleted: () => dispatch({ type: UI_CALCULATED }),\n    initalize: (ants) => dispatch({ type: INIT, payload: ants }),\n    inProgress: (id) => dispatch({ type: IN_PROGRESS, payload: { id } }),\n    completed: (id, likelihoodOfAntWinning) => dispatch({ type: CALCULATED, payload: { id, likelihoodOfAntWinning } })\n  })\n)(App)\n\n// Graphql QL Wrapper Component\nconst QueryWrapper = (props) => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <Query query={data}>\n        {({ data, loading }) => {\n          if (loading) {\n            return <div>Loading ...</div>;\n          }\n          return (\n            <ReduxWapper queryData={data} />\n          )\n        }}\n      </Query>\n    </header>\n  </div>\n);\n\nexport default (QueryWrapper);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { createStore,  applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport { ReduxCache, } from 'apollo-cache-redux';\nimport { rootReducer } from './reducers';\nimport logger from 'redux-logger';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';                                                                                                                                       \n\n\n// Redux Store Setup\nconst store = createStore(\n  rootReducer,\n  {},// Inital State\n  compose(\n    applyMiddleware(logger),\n    // If you are using the devToolsExtension, you can add it here also\n    (typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined') ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n)\n);\n\n// Apollo Client Setup\nconst cache = new ReduxCache({ store });\nconst URL = 'https://graphql-ants.herokuapp.com/graphql';\n\nconst httpLink = new HttpLink({\n  uri: URL,\n \n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.register();                                                                                                                                                             \n"],"sourceRoot":""}